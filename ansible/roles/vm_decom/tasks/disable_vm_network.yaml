---
- name: Get detailed VM hardware information for network adapters
  community.vmware.vmware_guest_info:
    hostname: "{{ vsphere_endpoint }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: "{{ vsphere_validate }}"
    name: "{{ vm_name }}"
    schema: "vsphere"
    properties:
      - "config.hardware.device"
  delegate_to: localhost
  register: _vm_hardware_info

- name: Extract network adapter information
  set_fact:
    _list_network_adapters: >-
      {{ _vm_hardware_info.instance.config.hardware.device 
          | selectattr('deviceInfo.label', 'match', 'Network adapter.*') 
          | list }}

- name: Display network adapters found
  debug:
    msg: 
      - "Found {{ _list_network_adapters | length }} network adapter(s)"
      - "Network adapters: {{ _list_network_adapters | map(attribute='deviceInfo.label') | list }}"

- name: Disconnect network adapters using vmware_guest_network
  community.vmware.vmware_guest_network:
    hostname: "{{ vsphere_endpoint }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: "{{ vsphere_validate }}"
    name: "{{ vm_name }}"
    device_type: "{{ item._vimtype.split('.')[-1] | lower }}"
    label: "{{ item.deviceInfo.label }}"
    connected: false
    start_connected: false
    state: present
  delegate_to: localhost
  loop: "{{ _list_network_adapters }}"
  when: _list_network_adapters | length > 0
  register: network_disconnect_result
  ignore_errors: yes

# # Method 2: Alternative using vmware_guest (if Method 1 fails)
# - name: Disconnect network adapters using vmware_guest (fallback method)
#   community.vmware.vmware_guest:
#     hostname: "{{ vsphere_endpoint }}"
#     username: "{{ vsphere_username }}"
#     password: "{{ vsphere_password }}"
#     validate_certs: "{{ vsphere_validate }}"
#     name: "{{ vm_name }}"
#     networks:
#       - name: "{{ item.backing.port.portgroupKey if item.backing._vimtype == 'vim.vm.device.VirtualEthernetCard.DistributedVirtualPortBackingInfo' else (item.backing.network.name | default('VM Network')) }}"
#         device_type: "{{ item._vimtype.split('.')[-1] | lower }}"
#         connected: false
#         start_connected: false
#     state: present
#   delegate_to: localhost
#   loop: "{{ _list_network_adapters }}"
#   when: 
#     - _list_network_adapters | length > 0
#     - network_disconnect_result is failed
#   ignore_errors: yes

# # Method 3: Using PyVmomi direct approach (most reliable)
# - name: Disconnect network adapters using direct VM reconfiguration
#   community.vmware.vmware_guest:
#     hostname: "{{ vsphere_endpoint }}"
#     username: "{{ vsphere_username }}"
#     password: "{{ vsphere_password }}"
#     validate_certs: "{{ vsphere_validate }}"
#     name: "{{ vm_name }}"
#     hardware:
#       num_cpus: "{{ _vm_hardware_info.instance.config.hardware.numCPU }}"
#       memory_mb: "{{ _vm_hardware_info.instance.config.hardware.memoryMB }}"
#     networks: "{{ _disconnected_networks }}"
#     state: present
#   vars:
#     _disconnected_networks: >-
#       {{
#         _list_network_adapters | map('combine', {
#           'name': item.backing.port.portgroupKey if item.backing._vimtype == 'vim.vm.device.VirtualEthernetCard.DistributedVirtualPortBackingInfo' 
#                   else (item.backing.network.name | default('VM Network')),
#           'device_type': item._vimtype.split('.')[-1] | lower,
#           'connected': false,
#           'start_connected': false,
#           'mac': item.macAddress
#         }) | list
#       }}
#   delegate_to: localhost
#   when: _list_network_adapters | length > 0

- name: Wait for network disconnection to complete
  pause:
    seconds: 5
  when: _list_network_adapters | length > 0

- name: Add Notes to VM {{ vm_name }} for decommission tracking
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_endpoint }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: "{{ vsphere_validate }}"
    name: "{{ vm_name }}"
    annotation: |
      Decommission scheduled via Ansible Workflow
       • Timestamp         : {{ '%Y-%m-%d %H:%M' | strftime }}
       • Initiated By      : {{ workflow_initiator }}
       • Change Request ID : {{ change_request_number }}
       • Network Status    : All adapters disconnected
  delegate_to: localhost

- name: Verify network disconnection status
  community.vmware.vmware_guest_info:
    hostname: "{{ vsphere_endpoint }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: "{{ vsphere_validate }}"
    name: "{{ vm_name }}"
    schema: "vsphere"
    properties:
      - "config.hardware.device"
  delegate_to: localhost
  register: _vm_hardware_info_after

- name: Extract updated network adapter status
  set_fact:
    _updated_list_network_adapters: >-
      {{ _vm_hardware_info_after.instance.config.hardware.device 
          | selectattr('deviceInfo.label', 'match', 'Network adapter.*') 
          | list }}

- name: Display network disconnection results - Final validation summary
  debug:
    msg:
      - "=== VALIDATION SUMMARY ==="
      - "Network disconnection completed for VM: {{ vm_name }} - IPv4 address: {{ vm_ipv4 }}"
      - "VM Power State: {{ _vm_power_state }}"
      - "Total adapters found: {{ _updated_list_network_adapters | length }}"
      - "Adapter labels: {{ _updated_list_network_adapters | map(attribute='deviceInfo.label') | list }}"
      - "Connection status: {{ _updated_list_network_adapters | map(attribute='connectable.connected') | list }}"
      - "Start connected status: {{ _updated_list_network_adapters | map(attribute='connectable.startConnected') | list }}"
      - "MAC addresses: {{ _updated_list_network_adapters | map(attribute='macAddress') | list }}"

- name: Fail if any network adapters are still connected
  fail:
    msg: "Some network adapters are still connected: {{ _still_connected }}"
  vars:
    _still_connected: >-
      {{ _updated_list_network_adapters 
          | selectattr('connectable.connected', 'equalto', true) 
          | map(attribute='deviceInfo.label') 
          | list }}
  when: 
    - _updated_list_network_adapters | selectattr('connectable.connected', 'equalto', true) | list | length > 0